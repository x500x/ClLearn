<!--
***********************************************************************************************
Microsoft.AnalysisServices.VSHostBuilder

This file defines the steps in the standard build process specific for Business Intelligence 
Semantic Model projects.
***********************************************************************************************
-->

  <Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- 
    The global default value for target framework version seems to be v4.0.
    This is used in various places, but specifically used by the GetReferenceAssemblyPaths target in Microsoft.Common.CurrentVersion.Targets.
    The default version works with VS 2019 and lower, but it is not supported by VS 2022 and higher. This is causing smproj files to break in VS2022.
    Therefore, we're overriding it to 4.7.2, which is supported.
  -->
  <PropertyGroup>
    <TargetFrameworkVersion>v4.7.2</TargetFrameworkVersion>
    <TargetFrameworkMoniker>.NETFramework,Version=$(TargetFrameworkVersion)</TargetFrameworkMoniker>
  </PropertyGroup>
    
    <!-- Include the current project and .targets file in MSBuildAllProjects. This variable is used for specifying transforms for compile steps.
    This is required because project must be rebuild if project file or .targets are changed.-->
    <PropertyGroup>
      <MSBuildAllProjects>
        $(MSBuildThisFileFullPath);$(MSBuildExtensionsPath)\Business Intelligence Semantic Model\1.0\Microsoft.AnalysisServices.VSHostBuilder.targets
      </MSBuildAllProjects>
    </PropertyGroup>

    <!-- Redefine the list of targets to be invoked during Build. Most of original targets are skipped because building BISM project
    does not require steps like resolving references or building resource files that are used in other types of projects -->
    <PropertyGroup>
      <CoreBuildDependsOn>
        BuildOnlySettings;
        PrepareForBuild;
        Compile;
        IncrementalClean;
      </CoreBuildDependsOn>
    </PropertyGroup>

    <!-- Redefine the list of targets to be invoked during Compile, remove unneccessary steps. -->
    <PropertyGroup>
      <CompileDependsOn>
        BeforeCompile;
        CoreCompile;
        AfterCompile
      </CompileDependsOn>
    </PropertyGroup>

    <!--Import the standards targets-->
    <Import Project="$(MSBuildBinPath)\Microsoft.Common.targets" />

    <!--Reference the assembly where our tasks are defined-->
    <UsingTask TaskName="Microsoft.AnalysisServices.VSHostBuilder.SemanticModelCompilerTask" AssemblyFile="$(MSBuildExtensionsPath)\Business Intelligence Semantic Model\1.0\Microsoft.AnalysisServices.VSHostBuilder.dll" />
    <UsingTask TaskName="Microsoft.AnalysisServices.VSHostBuilder.SemanticModelGetOutputFilesTask" AssemblyFile="$(MSBuildExtensionsPath)\Business Intelligence Semantic Model\1.0\Microsoft.AnalysisServices.VSHostBuilder.dll" />

    <!--Compile target (this is the target that calls the compiler task)-->
    <!--Compile will occur only if files in Inputs and Outputs have different timestamps-->
    <Target Name="SemanticModelCompilerTarget"
            DependsOnTargets="SemanticModelGetOutputFilesTarget"
            Inputs="@(Compile);$(MSBuildAllProjects)"
            Outputs="@(SemanticModelOutputFiles)">
      <SemanticModelCompilerTask
        SourceFiles="@(Compile)"
        OutputDirectory="$(IntermediateOutputPath)"
        TargetDatabase="$(DeploymentServerDatabase)"
        TargetCubeName="$(DeploymentServerCubeName)"
        TargetServer="$(DeploymentServerName)"
        DirectQueryMode="$(DeploymentOptionDirectQueryMode)"
        QueryImpersonationInfo="$(DeploymentOptionQueryImpersonation)"
        TransactionalDeployment="$(DeploymentOptionTransactionalDeployment)"
        ProcessingOption="$(DeploymentOptionProcessing)">
        <Output
          TaskParameter = "OutputFiles"
          ItemName = "FileWrites"/>        
      </SemanticModelCompilerTask>       
    </Target>

    <!--Target that creates the list of output files to be created during compile.-->
    <Target Name="SemanticModelGetOutputFilesTarget">
      <SemanticModelGetOutputFilesTask
        SourceFiles="@(Compile)"
        OutputDirectory="$(IntermediateOutputPath)">
        <Output
          TaskParameter = "OutputFiles"
          ItemName = "SemanticModelOutputFiles"/>
      </SemanticModelGetOutputFilesTask>
    </Target>

    <!--This is an override of CoreCompile to have our SemanticModelCompilerTask be called at compile time-->
    <Target
        Name="CoreCompile"
        Inputs="@(Compile);
              @(ReferencePath)"
        Outputs="@(IntermediateAssembly)"
        DependsOnTargets="$(CoreCompileDependsOn);SemanticModelCompilerTarget"
    >
    </Target>

    <!--This is an override of CopyFilesToOutputDirectory to have our built files to be copied to output directory.
    Override is required as default CopyFilesToOutputDirectory target from Microsoft.Common.targets copies 
    $(IntermediateAssembly) that does not make sense in our context.-->
    <Target
        Name="CopyFilesToOutputDirectory"
        DependsOnTargets="
            _CopySourceItemsToOutputDirectory;
            _CheckForCompileOutputs;">
      <Copy
          SourceFiles="@(SemanticModelOutputFiles)"
          DestinationFolder="$(OutDir)"
          SkipUnchangedFiles="true">
        <Output TaskParameter="DestinationFiles" 
                ItemName="FileWrites"/> <!--Save the list of destination files in FileWrites-->
      </Copy>
    </Target>

    <!--This is an override of _CheckForCompileOutputs to save the list of built files in FileWrites. Files 
    that are copied to output directory are also saved in FileWrites. Keeping FileWrites list in consistency is 
    required for a Clean functionality.-->
    <Target
        Name="_CheckForCompileOutputs">      
      <!--Record the main compile outputs.-->
      <FindUnderPath
        Files="@(SemanticModelOutputFiles->'%(FullPath)')"
        Path="$(IntermediateOutputPath)">
            <Output TaskParameter="InPath" ItemName="_SemanticModelOutputFilesInIntermediatePath"/>
      </FindUnderPath>
      <ItemGroup>
        <FileWrites Include="@(_SemanticModelOutputFilesInIntermediatePath)"/>
      </ItemGroup>
    </Target>

    <!--CreateManifestResourceNames must be defined even though it won't be built-->
    <Target Name="CreateManifestResourceNames"/>
    
  </Project>