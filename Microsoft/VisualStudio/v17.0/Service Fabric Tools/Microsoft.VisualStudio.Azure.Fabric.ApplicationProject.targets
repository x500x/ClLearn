<?xml version="1.0" encoding="utf-8"?>

<!--
***********************************************************************************************
Microsoft.VisualStudio.Azure.Fabric.ApplicationProject.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

This file defines the steps in the standard build process for Service Fabric projects.

Copyright (C) Microsoft Corporation. All rights reserved.
***********************************************************************************************
-->

<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <!-- Suppress common item schemas and capabilities as we are taking care of them. -->
    <DefineCommonItemSchemas>false</DefineCommonItemSchemas>
    <DefineCommonCapabilities>false</DefineCommonCapabilities>
    <ServiceFabricSDKDirectory Condition=" '$(ServiceFabricSDKDirectory)' == '' ">$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Service Fabric SDK', 'FabricSDKInstallPath', null, RegistryView.Registry64))</ServiceFabricSDKDirectory>
  </PropertyGroup>

  <!-- Capabilities for this project.  Conditions should be based on platform|configuration only. -->
  <ItemGroup>
    <ProjectCapability Include="ProjectReferences" />
    <!-- Technically not supported, but needed for NuGet support in VS. -->
    <ProjectCapability Include="AssemblyReferences" />
    <ProjectCapability Include="ReferencesFolder" />
    <ProjectCapability Include="ProjectConfigurationsDeclaredAsItems" />
    <ProjectCapability Include="FabricApplication" />
    <ProjectCapability Include="DeclaredSourceItems" />
    <ProjectCapability Include="UserSourceItems" />
  </ItemGroup>

  <!-- Describes the rules files used by CPS to represent the project -->
  <Choose>
    <When Condition=" ( '$(LangName)' == 'en-US' ) OR ( '$(LangName)' == '' ) ">
      <PropertyGroup>
        <RulesDirectory>$(MSBuildThisFileDirectory)Rules</RulesDirectory>
      </PropertyGroup>
    </When>
    <Otherwise>
      <PropertyGroup>
        <RulesDirectory>$(MSBuildThisFileDirectory)Rules\$(LangName)</RulesDirectory>
      </PropertyGroup>
    </Otherwise>
  </Choose>

  <ItemGroup>
    <PropertyPageSchema Include="
                        $(RulesDirectory)\General.xaml;
                        ">
      <Context>Project</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="
                        $(RulesDirectory)\General.BrowseObject.xaml;
                        ">
      <Context>;BrowseObject</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="
                        $(RulesDirectory)\ProjectReference.xaml;
                        ">
      <Context>;BrowseObject</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="
                        $(RulesDirectory)\ResolvedProjectReference.xaml;
                        ">
      <Context>ProjectSubscriptionService;BrowseObject</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="
                        $(RulesDirectory)\ProjectItemsSchema.xaml;
                        "/>

    <PropertyPageSchema Include="
                        $(RulesDirectory)\Content.xaml;
                        $(RulesDirectory)\Folder.xaml;
                        $(RulesDirectory)\None.xaml;
                        ">
      <Context>File;BrowseObject</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="
                        $(RulesDirectory)\General.Debugger.xaml;
                        $(RulesDirectory)\DebuggerLocal.xaml;
                        ">
      <Context>Project</Context>
    </PropertyPageSchema>

    <PropertyPageSchema Include="
                        $(RulesDirectory)\SCC.xaml;
                        ">
      <Context>Invisible</Context>
    </PropertyPageSchema>
  </ItemGroup>

  <PropertyGroup>
    <!-- The default content type as defined within Rules\ProjectItemsSchema.xaml -->
    <DefaultContentType>Default</DefaultContentType>
    <UpdateServiceFabricApplicationManifestEnabled Condition="'$(UpdateServiceFabricApplicationManifestEnabled)' == ''">$(BuildingInsideVisualStudio)</UpdateServiceFabricApplicationManifestEnabled>
  </PropertyGroup>

  <!-- Invokes _UpdateServiceFabricApplicationManifest on each of the referenced service projects. -->
  <Target Name="UpdateServiceFabricApplicationManifest"
          Outputs="%(AllServiceProjectsWithMetadata.Identity)"
          AfterTargets="Build"
          Condition=" '@(AllServiceProjectsWithMetadata)' != '' AND '$(UpdateServiceFabricApplicationManifestEnabled)' == 'true' ">

    <GetApplicationParametersFiles ApplicationProjectPath="$(MSBuildProjectFullPath)" LocalClusterMode="FiveNode">
      <Output TaskParameter="ApplicationParametersFiles" PropertyName="Local5NodeAppParamFile" />
    </GetApplicationParametersFiles>

    <GetApplicationParametersFiles ApplicationProjectPath="$(MSBuildProjectFullPath)" LocalClusterMode="OneNode">
      <Output TaskParameter="ApplicationParametersFiles" PropertyName="Local1NodeAppParamFile" />
    </GetApplicationParametersFiles>

    <PropertyGroup Condition=" '$(StartupServicesFilePath)' != '' " >
      <_ServiceParametersFileArgs>;StartupServicesFilePath=$(StartupServicesFilePath);LocalServiceParamFile=$(Local5NodeStartupServiceParamFile);Local5NodeServiceParamFile=$(Local5NodeStartupServiceParamFile);Local1NodeServiceParamFile=$(Local1NodeStartupServiceParamFile)</_ServiceParametersFileArgs>
      <_StartupServiceParametersFileArgs>;StartupServicesFilePath=$(StartupServicesFilePath);LocalStartupServiceParamFile=$(Local5NodeStartupServiceParamFile);Local5NodeStartupServiceParamFile=$(Local5NodeStartupServiceParamFile);Local1NodeStartupServiceParamFile=$(Local1NodeStartupServiceParamFile)</_StartupServiceParametersFileArgs>
    </PropertyGroup>

    <MSBuild Projects="%(AllServiceProjectsWithMetadata.Identity)"
             Targets="_UpdateServiceFabricApplicationManifest"
             Properties="%(AllServiceProjectsWithMetadata.CommonBuildProperties);ApplicationPackagePath=$(MSBuildProjectDirectory)\$(ApplicationPackageRootFolder);ApplicationPrefix=$(ProjectName);LocalAppParamFile=$(Local5NodeAppParamFile);Local5NodeAppParamFile=$(Local5NodeAppParamFile);Local1NodeAppParamFile=$(Local1NodeAppParamFile)$(_StartupServiceParametersFileArgs)$(_ServiceParametersFileArgs)" />

  </Target>

  <!-- Fixes up the application manifest by removing the orphaned ServiceManifestImport and Service instances. -->
  <Target Name="FixUpServiceFabricApplicationManifest"
          AfterTargets="UpdateServiceFabricApplicationManifest"
          Condition=" '@(ProjectReference)' != '' AND '$(UpdateServiceFabricApplicationManifestEnabled)' == 'true' ">

    <PropertyGroup>
      <_ServiceFabricAppManifestCleanupUtil>$(ServiceFabricSDKDirectory)\Tools\AppManifestCleanupUtil\AppManifestCleanupUtil.exe</_ServiceFabricAppManifestCleanupUtil>
    </PropertyGroup>

    <ItemGroup>
      <_ServiceManifestFullPath Include="@(ProjectReference -> '%(RootDir)%(Directory)$(ServicePackageRootFolder)\ServiceManifest.xml')" />
    </ItemGroup>

    <!-- Find any extra service manifests that have been included in the Application project's PackageRoot folder. -->
    <FindServiceManifests ApplicationPackageRootFolder="$(ApplicationPackageRootFolder)">
      <Output TaskParameter="ServiceManifestFiles" ItemName="_ServiceManifestFullPath" />
    </FindServiceManifests>

    <GetApplicationParametersFiles ApplicationProjectPath="$(MSBuildProjectFullPath)">
      <Output TaskParameter="ApplicationParametersFiles" ItemName="ApplicationParametersFiles" />
    </GetApplicationParametersFiles>

    <PropertyGroup>
      <ApplicationParametersFilesArg Condition=" '@(ApplicationParametersFiles)' != '' ">/appparamfiles:&quot;@(ApplicationParametersFiles)&quot;</ApplicationParametersFilesArg>
      <StartupServiceParametersFilesArg Condition=" '$(StartupServicesFilePath)' != '' and '@(StartupServiceParametersFiles)' != '' ">/startupserviceparamfiles:&quot;@(StartupServiceParametersFiles)&quot;</StartupServiceParametersFilesArg>
      <StartupServicesFilePathArg Condition=" '$(StartupServicesFilePath)' != '' ">/ssfp:&quot;$(StartupServicesFilePath)&quot;</StartupServicesFilePathArg>
    </PropertyGroup>

    <Exec Condition="Exists('$(_ServiceFabricAppManifestCleanupUtil)')"
          Command="&quot;$(_ServiceFabricAppManifestCleanupUtil)&quot; /amp:&quot;$(MSBuildProjectDirectory)\$(ApplicationManifestFilePath)&quot; /smpl:&quot;@(_ServiceManifestFullPath, ';')&quot; $(ApplicationParametersFilesArg) $(StartupServiceParametersFilesArg) $(StartupServicesFilePathArg)" WorkingDirectory="$(MSBuildProjectDirectory)" />

  </Target>

</Project>