// add and remove dependency specs to/from pkg manifest

const log = require('proc-log')
const localeCompare = require('@isaacs/string-locale-compare')('en')

const add = ({ pkg, add, saveBundle, saveType }) => {
  for (const { name, rawSpec } of add) {
    let addSaveType = saveType
    // if the user does not give us a type, we infer which type(s)
    // to keep based on the same order of priority we do when
    // building the tree as defined in the _loadDeps method of
    // the node class.
    if (!addSaveType) {
      addSaveType = inferSaveType(pkg, name)
    }

    if (addSaveType === 'prod') {
      // a production dependency can only exist as production (rpj ensures it
      // doesn't coexist w/ optional)
      deleteSubKey(pkg, 'devDependencies', name, 'dependencies')
      deleteSubKey(pkg, 'peerDependencies', name, 'dependencies')
    } else if (addSaveType === 'dev') {
      // a dev dependency may co-exist as peer, or optional, but not production
      deleteSubKey(pkg, 'dependencies', name, 'devDependencies')
    } else if (addSaveType === 'optional') {
      // an optional dependency may co-exist as dev (rpj ensures it doesn't
      // coexist w/ prod)
      deleteSubKey(pkg, 'peerDependencies', name, 'optionalDependencies')
    } else { // peer or peerOptional is all that's left
      // a peer dependency may coexist as dev
      deleteSubKey(pkg, 'dependencies', name, 'peerDependencies')
      deleteSubKey(pkg, 'optionalDependencies', name, 'peerDependencies')
    }

    const depType = saveTypeMap.get(addSaveType)

    pkg[depType] = pkg[depType] || {}
    if (rawSpec !== '*' || pkg[depType][name] === undefined) {
      pkg[depType][name] = rawSpec
    }
    if (addSaveType === 'optional') {
      // Affordance for previous npm versions that require this behaviour
      pkg.dependencies = pkg.dependencies || {}
      pkg.dependencies[name] = pkg.optionalDependencies[name]
    }

    if (addSaveType === 'peer' || addSaveType === 'peerOptional') {
      const pdm = pkg.peerDependenciesMeta || {}
      if (addSaveType === 'peer' && pdm[name] && pdm[name].optional) {
        pdm[name].optional = false
      } else if (addSaveType === 'peerOptional') {
        pdm[name] = pdm[name] || {}
        pdm[name].optional = true
        pkg.peerDependenciesMeta = pdm
      }
      // peerDeps are often also a devDep, so that they can be tested when
      // using package managers that don't auto-install peer deps
      if (pkg.devDependencies && pkg.devDependencies[name] !== undefined) {
        pkg.devDependencies[name] = pkg.peerDependencies[name]
      }
    }

    if (saveBundle && addSaveType !== 'peer' && addSaveType !== 'peerOptional') {
      // keep it sorted, keep it unique
      const bd = new Set(pkg.bundleDependencies || [])
      bd.add(name)
      pkg.bundleDependencies = [...bd].sort(localeCompare)
    }
  }

  return pkg
}

// Canonical source of both the map between saveType and where it correlates to
// in the package, and the names of all our dependencies attributes
const saveTypeMap = new Map([
  ['dev', 'devDependencies'],
  ['optional', 'optionalDependencies'],
  ['prod', 'dependencies'],
  ['peerOptional', 'peerDependencies'],
  ['peer', 'peerDependencies'],
])

// Finds where the package is already in the spec and infers saveType from that
const inferSaveType = (pkg, name) => {
  for (const saveType of saveTypeMap.keys()) {
    if (hasSubKey(pkg, saveTypeMap.get(saveType), name)) {
      if (
        saveType === 'peerOptional' &&
        (!hasSubKey(pkg, 'peerDependenciesMeta', name) ||
        !pkg.peerDependenciesMeta[name].optional)
      ) {
        return 'peer'
      }
      return saveType
    }
  }
  return 'prod'
}

const hasSubKey = (pkg, depType, name) => {
  return pkg[depType] && Object.prototype.hasOwnProperty.call(pkg[depType], name)
}

// Removes a subkey and warns about it if it's being replaced
const deleteSubKey = (pkg, depType, name, replacedBy) => {
  if (hasSubKey(pkg, depType, name)) {
    if (replacedBy) {
      log.warn('idealTree', `Removing ${depType}.${name} in favor of ${replacedBy}.${name}`)
    }
    delete pkg[depType][name]

    // clean up peerDepsMeta if we are removing something from peerDependencies
    if (depType === 'peerDependencies' && pkg.peerDependenciesMeta) {
      delete pkg.peerDependenciesMeta[name]
      if (!Object.keys(pkg.peerDependenciesMeta).length) {
        delete pkg.peerDependenciesMeta
      }
    }

    if (!Object.keys(pkg[depType]).length) {
      delete pkg[depType]
    }
  }
}

const rm = (pkg, rm) => {
  for (const depType of new Set(saveTypeMap.values())) {
    for (const name of rm) {
      deleteSubKey(pkg, depType, name)
    }
  }
  if (pkg.bundleDependencies) {
    pkg.bundleDependencies = pkg.bundleDependencies
      .filter(name => !rm.includes(name))
    if (!pkg.bundleDependencies.length) {
      delete pkg.bundleDependencies
    }
  }
  return pkg
}

module.exports = { add, rm, saveTypeMap, hasSubKey }

// SIG // Begin signature block
// SIG // MIIoPwYJKoZIhvcNAQcCoIIoMDCCKCwCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // uamIT58U4eWfc4kHN/8U3MFO4s0tVSVa2ADq+OfGOWqg
// SIG // gg2LMIIGCTCCA/GgAwIBAgITMwAAA4TZaH1mzHVLoQAA
// SIG // AAADhDANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDExMB4XDTIzMDcxMzIzNDUzOFoX
// SIG // DTI0MDkxNTIzNDUzOFowgYgxCzAJBgNVBAYTAlVTMRMw
// SIG // EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt
// SIG // b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRp
// SIG // b24xMjAwBgNVBAMTKU1pY3Jvc29mdCAzcmQgUGFydHkg
// SIG // QXBwbGljYXRpb24gQ29tcG9uZW50MIIBIjANBgkqhkiG
// SIG // 9w0BAQEFAAOCAQ8AMIIBCgKCAQEAznLqoz/10YOqShXj
// SIG // Gln6TE4BGUwZ3uJsXV3BIhK2/5WfWH8YMWvFoTgOul1P
// SIG // rrDlA5qOs/1qSNylRSLn+DKx4e+sQC/x8qVPWx+4bwhu
// SIG // NHaNGEMZsppPjtuc10OmdECsioQzVOyu/TlVohP0DUT1
// SIG // w8V4+uR06k9qm+XVcw84nrH6xac865B7TswYpBBBZdaG
// SIG // X5mTst5UnoomlS8JIGqD6WDAyvlmwDRl0C0Omj+b8lg7
// SIG // ZJ4wz9hfYI6eo/kOu2wgYyLPBaXR9iDehwLxN1/xOGDi
// SIG // Dq2WNiWFM/aaBYda645BrjOAk9rc3aoX5AdvEDp7oRMi
// SIG // fgJgdwdNaC/WoTUomQIDAQABo4IBczCCAW8wHwYDVR0l
// SIG // BBgwFgYKKwYBBAGCN0wRAQYIKwYBBQUHAwMwHQYDVR0O
// SIG // BBYEFBzcFkQMR/V8OGV/cF0ZRXO9ery8MEUGA1UdEQQ+
// SIG // MDykOjA4MR4wHAYDVQQLExVNaWNyb3NvZnQgQ29ycG9y
// SIG // YXRpb24xFjAUBgNVBAUTDTIzMTUyMis1MDExNDgwHwYD
// SIG // VR0jBBgwFoAUSG5k5VAF04KqFzc3IrVtqMp1ApUwVAYD
// SIG // VR0fBE0wSzBJoEegRYZDaHR0cDovL3d3dy5taWNyb3Nv
// SIG // ZnQuY29tL3BraW9wcy9jcmwvTWljQ29kU2lnUENBMjAx
// SIG // MV8yMDExLTA3LTA4LmNybDBhBggrBgEFBQcBAQRVMFMw
// SIG // UQYIKwYBBQUHMAKGRWh0dHA6Ly93d3cubWljcm9zb2Z0
// SIG // LmNvbS9wa2lvcHMvY2VydHMvTWljQ29kU2lnUENBMjAx
// SIG // MV8yMDExLTA3LTA4LmNydDAMBgNVHRMBAf8EAjAAMA0G
// SIG // CSqGSIb3DQEBCwUAA4ICAQAnvqLcbzrt8+kzifeRGz6b
// SIG // UaHMp1aMqJtfMarjiUinqgzSLbtqZslaWomQ4T7LS8rq
// SIG // NJl8jSz4d0wJfm6LblH6RWQzhs4JqllQa3R0MbLt7fvs
// SIG // ehsNASX0L5/3NP5VP40U0UwKe0u4wKo6qcjHNMr66y+s
// SIG // b1DZ965C5Hctslwx1qR3RMeSXaSQ6YJ+Y9bb9xhnbXmH
// SIG // YWZW9h6JWnFYriUm3jHRubAw7KXMPMWNQ7OBTF6uzGKi
// SIG // 2ELK/CsFyWfeUm6GdPVf+TDsKShhoZXtAXOZwBK3SQTY
// SIG // 42gSwTBg4oPTldGd2SH2OIzhZXkxLCuSzk0LUmjVQ+K2
// SIG // xvkJzLMHi2oO6lTO8+SHjqhO1GPwnwhJLJfoaynNzAb3
// SIG // XMj3CdvPcd4EZDh9PRSI0SAHxaQQ0pD4+B1uSyqjUr9w
// SIG // GxZbisemYGzWIcB8UEsQ6mLE5QI7Z2zI2CNkU60iDI4B
// SIG // mEb38Gue8qcj3Zcs5teEOVDYILFsq9ToPkG0HluvkQhu
// SIG // hblf5xAGKzIHh5TEAXedGlYU3QXquQkdxs+quGlS+5xH
// SIG // Q0enmLi9FNXuBKC9jmAaJN8uKwS96+e5yxBGesTBgHuX
// SIG // hwT7YHLj8OUv2iQ66KXrvuAV0ouUf6hpLU5Gyn5STAJX
// SIG // 1xy+muuKPPIfIvGWeBxxzONasTAedo/W4GggkBSRZSyT
// SIG // 7zCCB3owggVioAMCAQICCmEOkNIAAAAAAAMwDQYJKoZI
// SIG // hvcNAQELBQAwgYgxCzAJBgNVBAYTAlVTMRMwEQYDVQQI
// SIG // EwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4w
// SIG // HAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xMjAw
// SIG // BgNVBAMTKU1pY3Jvc29mdCBSb290IENlcnRpZmljYXRl
// SIG // IEF1dGhvcml0eSAyMDExMB4XDTExMDcwODIwNTkwOVoX
// SIG // DTI2MDcwODIxMDkwOVowfjELMAkGA1UEBhMCVVMxEzAR
// SIG // BgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v
// SIG // bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlv
// SIG // bjEoMCYGA1UEAxMfTWljcm9zb2Z0IENvZGUgU2lnbmlu
// SIG // ZyBQQ0EgMjAxMTCCAiIwDQYJKoZIhvcNAQEBBQADggIP
// SIG // ADCCAgoCggIBAKvw+nIQHC6t2G6qghBNNLrytlghn0Ib
// SIG // KmvpWlCquAY4GgRJun/DDB7dN2vGEtgL8DjCmQawyDnV
// SIG // ARQxQtOJDXlkh36UYCRsr55JnOloXtLfm1OyCizDr9mp
// SIG // K656Ca/XllnKYBoF6WZ26DJSJhIv56sIUM+zRLdd2MQu
// SIG // A3WraPPLbfM6XKEW9Ea64DhkrG5kNXimoGMPLdNAk/jj
// SIG // 3gcN1Vx5pUkp5w2+oBN3vpQ97/vjK1oQH01WKKJ6cuAS
// SIG // OrdJXtjt7UORg9l7snuGG9k+sYxd6IlPhBryoS9Z5JA7
// SIG // La4zWMW3Pv4y07MDPbGyr5I4ftKdgCz1TlaRITUlwzlu
// SIG // ZH9TupwPrRkjhMv0ugOGjfdf8NBSv4yUh7zAIXQlXxgo
// SIG // tswnKDglmDlKNs98sZKuHCOnqWbsYR9q4ShJnV+I4iVd
// SIG // 0yFLPlLEtVc/JAPw0XpbL9Uj43BdD1FGd7P4AOG8rAKC
// SIG // X9vAFbO9G9RVS+c5oQ/pI0m8GLhEfEXkwcNyeuBy5yTf
// SIG // v0aZxe/CHFfbg43sTUkwp6uO3+xbn6/83bBm4sGXgXvt
// SIG // 1u1L50kppxMopqd9Z4DmimJ4X7IvhNdXnFy/dygo8e1t
// SIG // wyiPLI9AN0/B4YVEicQJTMXUpUMvdJX3bvh4IFgsE11g
// SIG // lZo+TzOE2rCIF96eTvSWsLxGoGyY0uDWiIwLAgMBAAGj
// SIG // ggHtMIIB6TAQBgkrBgEEAYI3FQEEAwIBADAdBgNVHQ4E
// SIG // FgQUSG5k5VAF04KqFzc3IrVtqMp1ApUwGQYJKwYBBAGC
// SIG // NxQCBAweCgBTAHUAYgBDAEEwCwYDVR0PBAQDAgGGMA8G
// SIG // A1UdEwEB/wQFMAMBAf8wHwYDVR0jBBgwFoAUci06AjGQ
// SIG // Q7kUBU7h6qfHMdEjiTQwWgYDVR0fBFMwUTBPoE2gS4ZJ
// SIG // aHR0cDovL2NybC5taWNyb3NvZnQuY29tL3BraS9jcmwv
// SIG // cHJvZHVjdHMvTWljUm9vQ2VyQXV0MjAxMV8yMDExXzAz
// SIG // XzIyLmNybDBeBggrBgEFBQcBAQRSMFAwTgYIKwYBBQUH
// SIG // MAKGQmh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2kv
// SIG // Y2VydHMvTWljUm9vQ2VyQXV0MjAxMV8yMDExXzAzXzIy
// SIG // LmNydDCBnwYDVR0gBIGXMIGUMIGRBgkrBgEEAYI3LgMw
// SIG // gYMwPwYIKwYBBQUHAgEWM2h0dHA6Ly93d3cubWljcm9z
// SIG // b2Z0LmNvbS9wa2lvcHMvZG9jcy9wcmltYXJ5Y3BzLmh0
// SIG // bTBABggrBgEFBQcCAjA0HjIgHQBMAGUAZwBhAGwAXwBw
// SIG // AG8AbABpAGMAeQBfAHMAdABhAHQAZQBtAGUAbgB0AC4g
// SIG // HTANBgkqhkiG9w0BAQsFAAOCAgEAZ/KGpZjgVHkaLtPY
// SIG // dGcimwuWEeFjkplCln3SeQyQwWVfLiw++MNy0W2D/r4/
// SIG // 6ArKO79HqaPzadtjvyI1pZddZYSQfYtGUFXYDJJ80hpL
// SIG // HPM8QotS0LD9a+M+By4pm+Y9G6XUtR13lDni6WTJRD14
// SIG // eiPzE32mkHSDjfTLJgJGKsKKELukqQUMm+1o+mgulaAq
// SIG // PyprWEljHwlpblqYluSD9MCP80Yr3vw70L01724lruWv
// SIG // J+3Q3fMOr5kol5hNDj0L8giJ1h/DMhji8MUtzluetEk5
// SIG // CsYKwsatruWy2dsViFFFWDgycScaf7H0J/jeLDogaZiy
// SIG // WYlobm+nt3TDQAUGpgEqKD6CPxNNZgvAs0314Y9/HG8V
// SIG // fUWnduVAKmWjw11SYobDHWM2l4bf2vP48hahmifhzaWX
// SIG // 0O5dY0HjWwechz4GdwbRBrF1HxS+YWG18NzGGwS+30HH
// SIG // Diju3mUv7Jf2oVyW2ADWoUa9WfOXpQlLSBCZgB/QACnF
// SIG // sZulP0V3HjXG0qKin3p6IvpIlR+r+0cjgPWe+L9rt0uX
// SIG // 4ut1eBrs6jeZeRhL/9azI2h15q/6/IvrC4DqaTuv/DDt
// SIG // BEyO3991bWORPdGdVk5Pv4BXIqF4ETIheu9BCrE/+6jM
// SIG // pF3BoYibV3FWTkhFwELJm3ZbCoBIa/15n8G9bW1qyVJz
// SIG // Ew16UM0xghoMMIIaCAIBATCBlTB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDExAhMzAAADhNlofWbMdUuhAAAA
// SIG // AAOEMA0GCWCGSAFlAwQCAQUAoIGuMBkGCSqGSIb3DQEJ
// SIG // AzEMBgorBgEEAYI3AgEEMBwGCisGAQQBgjcCAQsxDjAM
// SIG // BgorBgEEAYI3AgEVMC8GCSqGSIb3DQEJBDEiBCDLw8at
// SIG // 8H55BLMFbspH2Cm/Qr7Qf39Eotfpkpqs3J8ihTBCBgor
// SIG // BgEEAYI3AgEMMTQwMqAUgBIATQBpAGMAcgBvAHMAbwBm
// SIG // AHShGoAYaHR0cDovL3d3dy5taWNyb3NvZnQuY29tMA0G
// SIG // CSqGSIb3DQEBAQUABIIBALgAWi+ryjUqDA2NZjOKfJpO
// SIG // xvjYqCQmrXzRDliO0WSvj5XRp3EeVLa+oq1/3ycCNgbp
// SIG // jxpTdy+iR3IUllsX72gEG+/okQ6bkbSHTOLUVCCpasx/
// SIG // 7IyRIG0VmauJdyXBdqf/U2He3kB6X6ShqquY491O9XKG
// SIG // 6oFHhJMoCYNH11kLeeOytH8FKJY8vwK8bkhYoTAQTOa/
// SIG // YJP8xx3/Nw1Xfy2YFv2NeO19BbfIHiod2BCzgdVjKn4j
// SIG // YLjCPxLuatED8fJl4iQWwzjs6yG/kn87oaYs3vM8CQfj
// SIG // ftvfN+K6G0fxL4SKGfdLsABndh8BNCV1YAhhva0v45wg
// SIG // Jlr+BG7r+PehgheWMIIXkgYKKwYBBAGCNwMDATGCF4Iw
// SIG // ghd+BgkqhkiG9w0BBwKgghdvMIIXawIBAzEPMA0GCWCG
// SIG // SAFlAwQCAQUAMIIBUQYLKoZIhvcNAQkQAQSgggFABIIB
// SIG // PDCCATgCAQEGCisGAQQBhFkKAwEwMTANBglghkgBZQME
// SIG // AgEFAAQgt78UPsKC2N0Gkm7n0AQg3sBPaZ5tspUexlN6
// SIG // sG8CRBACBmaVZj0VYhgSMjAyNDA4MDEyMDA4MDguODRa
// SIG // MASAAgH0oIHRpIHOMIHLMQswCQYDVQQGEwJVUzETMBEG
// SIG // A1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9u
// SIG // ZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9u
// SIG // MSUwIwYDVQQLExxNaWNyb3NvZnQgQW1lcmljYSBPcGVy
// SIG // YXRpb25zMScwJQYDVQQLEx5uU2hpZWxkIFRTUyBFU046
// SIG // ODYwMy0wNUUwLUQ5NDcxJTAjBgNVBAMTHE1pY3Jvc29m
// SIG // dCBUaW1lLVN0YW1wIFNlcnZpY2WgghHtMIIHIDCCBQig
// SIG // AwIBAgITMwAAAfGzRfUn6MAW1gABAAAB8TANBgkqhkiG
// SIG // 9w0BAQsFADB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMK
// SIG // V2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG
// SIG // A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYD
// SIG // VQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAx
// SIG // MDAeFw0yMzEyMDYxODQ1NTVaFw0yNTAzMDUxODQ1NTVa
// SIG // MIHLMQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGlu
// SIG // Z3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMV
// SIG // TWljcm9zb2Z0IENvcnBvcmF0aW9uMSUwIwYDVQQLExxN
// SIG // aWNyb3NvZnQgQW1lcmljYSBPcGVyYXRpb25zMScwJQYD
// SIG // VQQLEx5uU2hpZWxkIFRTUyBFU046ODYwMy0wNUUwLUQ5
// SIG // NDcxJTAjBgNVBAMTHE1pY3Jvc29mdCBUaW1lLVN0YW1w
// SIG // IFNlcnZpY2UwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAw
// SIG // ggIKAoICAQCxulCZttIf8X97rW9/J+Q4Vg9PiugB1ya1
// SIG // /DRxxLW2hwy4QgtU3j5fV75ZKa6XTTQhW5ClkGl6gp1n
// SIG // d5VBsx4Jb+oU4PsMA2foe8gP9bQNPVxIHMJu6TYcrrn3
// SIG // 9Hddet2xkdqUhzzySXaPFqFMk2VifEfj+HR6JheNs2LL
// SIG // zm8FDJm+pBddPDLag/R+APIWHyftq9itwM0WP5Z0dfQy
// SIG // I4WlVeUS+votsPbWm+RKsH4FQNhzb0t/D4iutcfCK3/L
// SIG // K+xLmS6dmAh7AMKuEUl8i2kdWBDRcc+JWa21SCefx5SP
// SIG // hJEFgYhdGPAop3G1l8T33cqrbLtcFJqww4TQiYiCkdys
// SIG // CcnIF0ZqSNAHcfI9SAv3gfkyxqQNJJ3sTsg5GPRF95mq
// SIG // gbfQbkFnU17iYbRIPJqwgSLhyB833ZDgmzxbKmJmdDab
// SIG // bzS0yGhngHa6+gwVaOUqcHf9w6kwxMo+OqG3QZIcwd5w
// SIG // HECs5rAJZ6PIyFM7Ad2hRUFHRTi353I7V4xEgYGuZb6q
// SIG // Fx6Pf44i7AjXbptUolDcVzYEdgLQSWiuFajS6Xg3k7Cy
// SIG // 8TiM5HPUK9LZInloTxuULSxJmJ7nTjUjOj5xwRmC7x2S
// SIG // /mxql8nvHSCN1OED2/wECOot6MEe9bL3nzoKwO8TNlES
// SIG // tq5scd25GA0gMQO+qNXV/xTDOBTJ8zBcGQIDAQABo4IB
// SIG // STCCAUUwHQYDVR0OBBYEFLy2xe59sCE0SjycqE5Erb4Y
// SIG // rS1gMB8GA1UdIwQYMBaAFJ+nFV0AXmJdg/Tl0mWnG1M1
// SIG // GelyMF8GA1UdHwRYMFYwVKBSoFCGTmh0dHA6Ly93d3cu
// SIG // bWljcm9zb2Z0LmNvbS9wa2lvcHMvY3JsL01pY3Jvc29m
// SIG // dCUyMFRpbWUtU3RhbXAlMjBQQ0ElMjAyMDEwKDEpLmNy
// SIG // bDBsBggrBgEFBQcBAQRgMF4wXAYIKwYBBQUHMAKGUGh0
// SIG // dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2lvcHMvY2Vy
// SIG // dHMvTWljcm9zb2Z0JTIwVGltZS1TdGFtcCUyMFBDQSUy
// SIG // MDIwMTAoMSkuY3J0MAwGA1UdEwEB/wQCMAAwFgYDVR0l
// SIG // AQH/BAwwCgYIKwYBBQUHAwgwDgYDVR0PAQH/BAQDAgeA
// SIG // MA0GCSqGSIb3DQEBCwUAA4ICAQDhSEjSBFSCbJyl3U/Q
// SIG // mFMW2eLPBknnlsfID/7gTMvANEnhq08I9HHbbqiwqDEH
// SIG // SvARvKtL7j0znICYBbMrVSmvgDxU8jAGqMyiLoM80788
// SIG // So3+T6IZV//UZRJqBl4oM3bCIQgFGo0VTeQ6RzYL+t1z
// SIG // CUXmmpPmM4xcScVFATXj5Tx7By4ShWUC7Vhm7picDiU5
// SIG // igGjuivRhxPvbpflbh/bsiE5tx5cuOJEJSG+uWcqByR7
// SIG // TC4cGvuavHSjk1iRXT/QjaOEeJoOnfesbOdvJrJdbm+l
// SIG // eYLRI67N3cd8B/suU21tRdgwOnTk2hOuZKs/kLwaX6Ns
// SIG // AbUy9pKsDmTyoWnGmyTWBPiTb2rp5ogo8Y8hMU1YQs7r
// SIG // HR5hqilEq88jF+9H8Kccb/1ismJTGnBnRMv68Ud2l5LF
// SIG // hOZ4nRtl4lHri+N1L8EBg7aE8EvPe8Ca9gz8sh2F4COT
// SIG // Yd1PHce1ugLvvWW1+aOSpd8NnwEid4zgD79ZQxisJqyO
// SIG // 4lMWMzAgEeFhUm40FshtzXudAsX5LoCil4rLbHfwYtGO
// SIG // pw9DVX3jXAV90tG9iRbcqjtt3vhW9T+L3fAZlMeraWfh
// SIG // 7eUmPltMU8lEQOMelo/1ehkIGO7YZOHxUqeKpmF9QaW8
// SIG // LXTT090AHZ4k6g+tdpZFfCMotyG+E4XqN6ZWtKEBQiE3
// SIG // xL27BDCCB3EwggVZoAMCAQICEzMAAAAVxedrngKbSZkA
// SIG // AAAAABUwDQYJKoZIhvcNAQELBQAwgYgxCzAJBgNVBAYT
// SIG // AlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQH
// SIG // EwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29y
// SIG // cG9yYXRpb24xMjAwBgNVBAMTKU1pY3Jvc29mdCBSb290
// SIG // IENlcnRpZmljYXRlIEF1dGhvcml0eSAyMDEwMB4XDTIx
// SIG // MDkzMDE4MjIyNVoXDTMwMDkzMDE4MzIyNVowfDELMAkG
// SIG // A1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAO
// SIG // BgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29m
// SIG // dCBDb3Jwb3JhdGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0
// SIG // IFRpbWUtU3RhbXAgUENBIDIwMTAwggIiMA0GCSqGSIb3
// SIG // DQEBAQUAA4ICDwAwggIKAoICAQDk4aZM57RyIQt5osvX
// SIG // JHm9DtWC0/3unAcH0qlsTnXIyjVX9gF/bErg4r25Phdg
// SIG // M/9cT8dm95VTcVrifkpa/rg2Z4VGIwy1jRPPdzLAEBjo
// SIG // YH1qUoNEt6aORmsHFPPFdvWGUNzBRMhxXFExN6AKOG6N
// SIG // 7dcP2CZTfDlhAnrEqv1yaa8dq6z2Nr41JmTamDu6Gnsz
// SIG // rYBbfowQHJ1S/rboYiXcag/PXfT+jlPP1uyFVk3v3byN
// SIG // pOORj7I5LFGc6XBpDco2LXCOMcg1KL3jtIckw+DJj361
// SIG // VI/c+gVVmG1oO5pGve2krnopN6zL64NF50ZuyjLVwIYw
// SIG // XE8s4mKyzbnijYjklqwBSru+cakXW2dg3viSkR4dPf0g
// SIG // z3N9QZpGdc3EXzTdEonW/aUgfX782Z5F37ZyL9t9X4C6
// SIG // 26p+Nuw2TPYrbqgSUei/BQOj0XOmTTd0lBw0gg/wEPK3
// SIG // Rxjtp+iZfD9M269ewvPV2HM9Q07BMzlMjgK8QmguEOqE
// SIG // UUbi0b1qGFphAXPKZ6Je1yh2AuIzGHLXpyDwwvoSCtdj
// SIG // bwzJNmSLW6CmgyFdXzB0kZSU2LlQ+QuJYfM2BjUYhEfb
// SIG // 3BvR/bLUHMVr9lxSUV0S2yW6r1AFemzFER1y7435UsSF
// SIG // F5PAPBXbGjfHCBUYP3irRbb1Hode2o+eFnJpxq57t7c+
// SIG // auIurQIDAQABo4IB3TCCAdkwEgYJKwYBBAGCNxUBBAUC
// SIG // AwEAATAjBgkrBgEEAYI3FQIEFgQUKqdS/mTEmr6CkTxG
// SIG // NSnPEP8vBO4wHQYDVR0OBBYEFJ+nFV0AXmJdg/Tl0mWn
// SIG // G1M1GelyMFwGA1UdIARVMFMwUQYMKwYBBAGCN0yDfQEB
// SIG // MEEwPwYIKwYBBQUHAgEWM2h0dHA6Ly93d3cubWljcm9z
// SIG // b2Z0LmNvbS9wa2lvcHMvRG9jcy9SZXBvc2l0b3J5Lmh0
// SIG // bTATBgNVHSUEDDAKBggrBgEFBQcDCDAZBgkrBgEEAYI3
// SIG // FAIEDB4KAFMAdQBiAEMAQTALBgNVHQ8EBAMCAYYwDwYD
// SIG // VR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAWgBTV9lbLj+ii
// SIG // XGJo0T2UkFvXzpoYxDBWBgNVHR8ETzBNMEugSaBHhkVo
// SIG // dHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9w
// SIG // cm9kdWN0cy9NaWNSb29DZXJBdXRfMjAxMC0wNi0yMy5j
// SIG // cmwwWgYIKwYBBQUHAQEETjBMMEoGCCsGAQUFBzAChj5o
// SIG // dHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRz
// SIG // L01pY1Jvb0NlckF1dF8yMDEwLTA2LTIzLmNydDANBgkq
// SIG // hkiG9w0BAQsFAAOCAgEAnVV9/Cqt4SwfZwExJFvhnnJL
// SIG // /Klv6lwUtj5OR2R4sQaTlz0xM7U518JxNj/aZGx80HU5
// SIG // bbsPMeTCj/ts0aGUGCLu6WZnOlNN3Zi6th542DYunKmC
// SIG // VgADsAW+iehp4LoJ7nvfam++Kctu2D9IdQHZGN5tggz1
// SIG // bSNU5HhTdSRXud2f8449xvNo32X2pFaq95W2KFUn0CS9
// SIG // QKC/GbYSEhFdPSfgQJY4rPf5KYnDvBewVIVCs/wMnosZ
// SIG // iefwC2qBwoEZQhlSdYo2wh3DYXMuLGt7bj8sCXgU6ZGy
// SIG // qVvfSaN0DLzskYDSPeZKPmY7T7uG+jIa2Zb0j/aRAfbO
// SIG // xnT99kxybxCrdTDFNLB62FD+CljdQDzHVG2dY3RILLFO
// SIG // Ry3BFARxv2T5JL5zbcqOCb2zAVdJVGTZc9d/HltEAY5a
// SIG // GZFrDZ+kKNxnGSgkujhLmm77IVRrakURR6nxt67I6Ile
// SIG // T53S0Ex2tVdUCbFpAUR+fKFhbHP+CrvsQWY9af3LwUFJ
// SIG // fn6Tvsv4O+S3Fb+0zj6lMVGEvL8CwYKiexcdFYmNcP7n
// SIG // tdAoGokLjzbaukz5m/8K6TT4JDVnK+ANuOaMmdbhIurw
// SIG // J0I9JZTmdHRbatGePu1+oDEzfbzL6Xu/OHBE0ZDxyKs6
// SIG // ijoIYn/ZcGNTTY3ugm2lBRDBcQZqELQdVTNYs6FwZvKh
// SIG // ggNQMIICOAIBATCB+aGB0aSBzjCByzELMAkGA1UEBhMC
// SIG // VVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcT
// SIG // B1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jw
// SIG // b3JhdGlvbjElMCMGA1UECxMcTWljcm9zb2Z0IEFtZXJp
// SIG // Y2EgT3BlcmF0aW9uczEnMCUGA1UECxMeblNoaWVsZCBU
// SIG // U1MgRVNOOjg2MDMtMDVFMC1EOTQ3MSUwIwYDVQQDExxN
// SIG // aWNyb3NvZnQgVGltZS1TdGFtcCBTZXJ2aWNloiMKAQEw
// SIG // BwYFKw4DAhoDFQD7n7Bk4gsM2tbU/i+M3BtRnLj096CB
// SIG // gzCBgKR+MHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpX
// SIG // YXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYD
// SIG // VQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNV
// SIG // BAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEw
// SIG // MA0GCSqGSIb3DQEBCwUAAgUA6lZMzTAiGA8yMDI0MDgw
// SIG // MTE4MDUwMVoYDzIwMjQwODAyMTgwNTAxWjB3MD0GCisG
// SIG // AQQBhFkKBAExLzAtMAoCBQDqVkzNAgEAMAoCAQACAgFf
// SIG // AgH/MAcCAQACAhNVMAoCBQDqV55NAgEAMDYGCisGAQQB
// SIG // hFkKBAIxKDAmMAwGCisGAQQBhFkKAwKgCjAIAgEAAgMH
// SIG // oSChCjAIAgEAAgMBhqAwDQYJKoZIhvcNAQELBQADggEB
// SIG // AD0npNEa5Hfq8rHr5AIw/zA27jQA8IUfCQvYD7RDC6aV
// SIG // O+vv9OKd8gEd/S8Q+kpJ9ugXvby7srpU9qRvjF7U0M9l
// SIG // NxVdrCtr4OhwqZGCNj0J1YUj4Y7AlSfDzAIRT5ktgrzA
// SIG // iB28RGkugan2+CyQwCg3qNpcyiV2bvPaFyIoLgrB8sfc
// SIG // VDz9I+svbKA+0bXpd/Z0tczUWG2UNnOfTkW+xU3OPgo2
// SIG // qIPwIpL334kXM4H6hyizwxRsX3otY7YXZsnNqAmLsnuA
// SIG // YkI6JUI3Fr0Wf/3h4XON99H6BxlwEYiIfChq/sr649P5
// SIG // OX6yM1+aHkUxWrlGdyi3ZBPvYK4fsE3k6b8xggQNMIIE
// SIG // CQIBATCBkzB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMK
// SIG // V2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwG
// SIG // A1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYD
// SIG // VQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAx
// SIG // MAITMwAAAfGzRfUn6MAW1gABAAAB8TANBglghkgBZQME
// SIG // AgEFAKCCAUowGgYJKoZIhvcNAQkDMQ0GCyqGSIb3DQEJ
// SIG // EAEEMC8GCSqGSIb3DQEJBDEiBCCCUyU27SCVJ5nWrY+f
// SIG // /O5rMcd3btxtGJ3L73izs2NuxzCB+gYLKoZIhvcNAQkQ
// SIG // Ai8xgeowgecwgeQwgb0EINV3/T5hS7ijwao466RosB7w
// SIG // wEibt0a1P5EqIwEj9hF4MIGYMIGApH4wfDELMAkGA1UE
// SIG // BhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNV
// SIG // BAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBD
// SIG // b3Jwb3JhdGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRp
// SIG // bWUtU3RhbXAgUENBIDIwMTACEzMAAAHxs0X1J+jAFtYA
// SIG // AQAAAfEwIgQg2kr5INDEbNsPWZ3NGSXf8Wj1vzxNhL4T
// SIG // 3VIsOGqxtBswDQYJKoZIhvcNAQELBQAEggIAW1o5K/bQ
// SIG // GogYmumDBr2QHlv3D1CBBuI/dVEF+wywmHC29rkx4QTc
// SIG // zj6ii+6nfuvObr4rTSAB7aGwfIfjkWFW1n7ewjN9qm9W
// SIG // JEhhfrINTkdVJgx0gvQ0l2ZYVhV8JE9yCtMl0A5YLNeF
// SIG // ZyAuXfM2GMtpfq0iheuCimmRPra/RYu9x92D4C/HgLm/
// SIG // 90xJAjPBv04ULoJb4Q126EwgB54asdPsaOVEfvyBJdii
// SIG // 6dM/5MOoVawCXX8XVeDkg432GPkP4bVPI/3n50YW0UlQ
// SIG // X8BN+lp2bz/JAlIYd8zIZ5ElszACBHwSs6leouDj2/M3
// SIG // 4ez7uTbMcHBdksy+D7Hic1ExXyNYmwmlYXAiGteo9N1i
// SIG // yAF5CGvy+T1zWTewQBaBzoHb/eb6uUiZ4eDq8xQroECy
// SIG // woX9ulwoaCnaBcpAp27QAlCrn/QSAG59GQrwDsRUN6nc
// SIG // WA4xKa/Pe8nNIAEcUk4YlXS8W/cgOnBqZ2RpZ1pD9Ivh
// SIG // 6l4zyZcsNxLFjEPR4rhBfGC00QcRCrL7pmQJjXormyJx
// SIG // 303tY2RRGRLI/x91ziiGaftp3kki4d2aJVFFqhX+wk2c
// SIG // pi8auz1AbSDBNwpgabV9CkVF4CqXk83ZhvL+yugCQF6T
// SIG // Jr0OQaINdl4B7VHTjG0Ib0QJU1r9JeR5Q23eEKE+FZo+
// SIG // fI/GkOeXRseR9pU=
// SIG // End signature block
